package {	import flash.events.*;	import flash.display.*;	import flash.text.*;	import flash.filters.GlowFilter;	import fl.controls.*;	import flash.utils.*;	import fl.transitions.Tween;	import fl.transitions.easing.None;	import ValveLib.*;	public class hlwincome extends MovieClip	{		public var gameAPI:Object;		public var globals:Object;		public var elementName:String;		public var player1:MovieClip;		public var player2:MovieClip;		public var player3:MovieClip;		public var player4:MovieClip;		public var player5:MovieClip;		public var player6:MovieClip;		public var player7:MovieClip;		public var player8:MovieClip;		public var player9:MovieClip;		public var player10:MovieClip;		public var ownplayer:MovieClip;		public var gold:MovieClip;		public var progressbar:MovieClip;		public var myprogress:MovieClip;		public var extendButton:Button;		public var shrinkButton:Button;		public var playerpanels:Vector.<MovieClip> = new Vector.<MovieClip>();		public var goodPlayers:Vector.<int> = new Vector.<int>();		public var badPlayers:Vector.<int> = new Vector.<int>();		public var goldGlow:GlowFilter = new GlowFilter();		public var maxGoldGlow = 35;		public var nameFormat = new TextFormat();		public var incomeFormat = new TextFormat();		public var titleFormat = new TextFormat();				public var progressbarTimer = new Timer(100);		public var accumulatedDelay = 0;		public var currentIncomeMS = 0;		public var incomeMS = 10000;				public var smallProgressBarTween;		public var bigProgressBarTween;				public function hlwincome()		{						playerpanels.push(this.big.player1);			playerpanels.push(this.big.player2);			playerpanels.push(this.big.player3);			playerpanels.push(this.big.player4);			playerpanels.push(this.big.player5);			playerpanels.push(this.big.player6);			playerpanels.push(this.big.player7);			playerpanels.push(this.big.player8);			playerpanels.push(this.big.player9);			playerpanels.push(this.big.player10);			nameFormat.color = 0xFFFFFF;			nameFormat.size = 30;			nameFormat.align = "left";			nameFormat.bold = "true";			nameFormat.font = "Dota Hypatia Regular";			incomeFormat.color = 0xFFFFFF;			incomeFormat.size = 30;			incomeFormat.align = "center";			incomeFormat.bold = "true";			incomeFormat.font = "Dota Hypatia Regular";			titleFormat.color = 0xFFFFFF;			titleFormat.size = 43;			titleFormat.align = "left";			titleFormat.bold = "true";			titleFormat.font = "Dota Hypatia Regular";			for each (var pnl:MovieClip in playerpanels)			{				pnl.playername.playernametext.setTextFormat(nameFormat);				pnl.income.incometext.setTextFormat(incomeFormat);			}			small.ownplayer.playername.playernametext.setTextFormat(nameFormat);			small.ownplayer.income.incometext.setTextFormat(incomeFormat);			big.incometitle.setTextFormat(titleFormat);			small.incometitle.setTextFormat(titleFormat);			goldGlow.alpha = 0.6;			goldGlow.color = 0xFFCC33;			goldGlow.inner = false;			goldGlow.blurX = 0;			goldGlow.blurY = 0;			small.gold.filters = [goldGlow];			big.gold.filters = [goldGlow];						big.progressbar.myprogress.scaleX = 0;			small.progressbar.myprogress.scaleX = 0;					}		public function onLoaded():void		{			this.gameAPI.SubscribeToGameEvent("hlw_initialize_interface", this.onInitializeInterface);			this.gameAPI.SubscribeToGameEvent("hlw_close_interface", this.onCloseInterface);			this.gameAPI.SubscribeToGameEvent("hlw_update_player_name", this.onUpdateName);			this.gameAPI.SubscribeToGameEvent("hlw_update_player_income", this.onUpdateIncome);			this.gameAPI.SubscribeToGameEvent("hlw_income", this.onIncome);			//this.gameAPI.SubscribeToGameEvent("hero_picker_hidden", this.onHeroPickerHidden);						small.extendButton.addEventListener(MouseEvent.CLICK, extend);			big.shrinkButton.addEventListener(MouseEvent.CLICK, shrink);									progressbarTimer.addEventListener(TimerEvent.TIMER, timerHandler);			progressbarTimer.reset();			small.visible = false;			big.visible = true;			visible = false;		}				public function timerHandler(arg1:TimerEvent)		{			accumulatedDelay += progressbarTimer.delay;			if(visible)			{				currentIncomeMS += accumulatedDelay;				accumulatedDelay = 0;				if(currentIncomeMS>incomeMS)				{					currentIncomeMS=incomeMS;				}				var percentage = currentIncomeMS/incomeMS;				var glowdistance = this.maxGoldGlow * percentage;				goldGlow.blurX = glowdistance;				goldGlow.blurY = glowdistance;				if(big.visible)				{					bigProgressBarTween.continueTo(percentage, progressbarTimer.delay/1000);					big.gold.filters = [goldGlow];				}				else if(small.visible)				{					smallProgressBarTween.continueTo(percentage, progressbarTimer.delay/1000);					small.gold.filters = [goldGlow];				}			}		}		public function onScreenSizeChanged():void		{			var scale = this.globals.resizeManager.ScreenWidth / 1920 * 0.6;			scaleX = scale;			scaleY = scale;			x = (this.globals.resizeManager.ScreenWidth) - width;			y = (this.globals.resizeManager.ScreenHeight)/1080*42; //42 pixles on 1080p resolution		}				public function onInitializeInterface(arg1:Object)		{			incomeMS = arg1.nIncomeSeconds*1000;			big.progressbar.maximum = incomeMS;			small.progressbar.maximum = incomeMS;			visible = true;		}				public function onIncome(arg1:Object)		{			progressbarTimer.reset();			goldGlow.blurX = 0;			goldGlow.blurY = 0;			small.gold.filters = [goldGlow];			big.gold.filters = [goldGlow]; 			currentIncomeMS = 0;			accumulatedDelay = 0;			big.progressbar.myprogress.scaleX = 0;			small.progressbar.myprogress.scaleX = 0;			smallProgressBarTween = new Tween(small.progressbar.myprogress, "scaleX", None.easeNone, 0, 0, 0, true);			bigProgressBarTween = new Tween(big.progressbar.myprogress, "scaleX", None.easeNone, 0, 0, 0, true);			progressbarTimer.start();		}				public function onCloseInterface(arg1:Object)		{			progressbarTimer.stop();		}		public function onUpdateName(arg1:Object)		{			if (arg1.nPlayerID == globals.Players.GetLocalPlayer())			{				small.ownplayer.playername.playernametext.text = globals.Players.GetPlayerName(arg1.nPlayerID);				small.ownplayer.playername.playernametext.setTextFormat(nameFormat);			}			var nameTextElement;			var id:int = -1;			if (arg1.nPlayerTeam == 2)			{				id = goodPlayers.indexOf(arg1.nPlayerID);				if(id != -1)				{					nameTextElement = playerpanels[id].playername.playernametext;				}				else				{					nameTextElement = playerpanels[goodPlayers.push(arg1.nPlayerID) - 1].playername.playernametext;				}				nameTextElement.text = globals.Players.GetPlayerName(arg1.nPlayerID);				nameTextElement.setTextFormat(nameFormat);			}			else if (arg1.nPlayerTeam == 3)			{				id = badPlayers.indexOf(arg1.nPlayerID);				if(id != -1)				{					nameTextElement = playerpanels[5 + id].playername.playernametext;				}				else				{					nameTextElement = playerpanels[5 + badPlayers.push(arg1.nPlayerID) - 1].playername.playernametext;				}				nameTextElement.text = globals.Players.GetPlayerName(arg1.nPlayerID);				nameTextElement.setTextFormat(nameFormat);			}		}		public function onUpdateIncome(arg1:Object)		{			if (arg1.nPlayerID == globals.Players.GetLocalPlayer())			{				small.ownplayer.income.incometext.text = Math.floor(arg1.nIncome).toString();				small.ownplayer.income.incometext.setTextFormat(incomeFormat);			}			var id:int = -1;			id = goodPlayers.indexOf(arg1.nPlayerID);			if (id != -1)			{				playerpanels[id].income.incometext.text = Math.floor(arg1.nIncome).toString();				playerpanels[id].income.incometext.setTextFormat(incomeFormat);			}			else			{				id = badPlayers.indexOf(arg1.nPlayerID);				if (id != -1)				{					playerpanels[id + 5].income.incometext.text = Math.floor(arg1.nIncome).toString();					playerpanels[id + 5].income.incometext.setTextFormat(incomeFormat);				}			}			id = 0;		}				public function extend(e:MouseEvent):void		{			globals.GameInterface.PlaySound("General.ButtonClick");			small.visible = false;			big.visible = true;		}		public function shrink(e:MouseEvent):void		{			globals.GameInterface.PlaySound("General.ButtonClick");			small.visible = true;			big.visible = false;		}	}}