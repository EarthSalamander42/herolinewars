package {	import flash.events.*;	import flash.display.*;	import flash.geom.*;	import flash.text.*;	import flash.utils.*;	import ValveLib.*;	import scaleform.gfx.*;	import flash.ui.Mouse;		Extensions.enabled = true;	public class hlwshop extends MovieClip	{		public var gameAPI:Object;		public var globals:Object;		public var elementName:String;		public var buttons:Vector.<MovieClip> = new Vector.<MovieClip>();		public var buycreep1:MovieClip;		public var buycreep2:MovieClip;		public var buycreep3:MovieClip;		public var buycreep4:MovieClip;		public var buycreep5:MovieClip;		public var buycreep6:MovieClip;		public var buycreep7:MovieClip;		public var buycreep8:MovieClip;		public var buycreep9:MovieClip;		public var buycreep10:MovieClip;		public var upgradeButton:MovieClip;		public var contentclip:MovieClip;		public var overlay:MovieClip;		public var creepimage:MovieClip;		public var costFormat = new TextFormat();		public var chargeFormat = new TextFormat();		public var maxCharges = 0;		public var controllerLevel = 0;		public var maxControllerLevel = 0;		public var creepsPerLevel = 0;		public var gameStarted = false;		public var tooManyCreeps = false;		public var upgradeCost:Array = new Array();		public var charges:Array = new Array();		public var cost:Array = new Array();		public function hlwshop()		{			buttons.push(this.buycreep1);			buttons.push(this.buycreep2);			buttons.push(this.buycreep3);			buttons.push(this.buycreep4);			buttons.push(this.buycreep5);			buttons.push(this.buycreep6);			buttons.push(this.buycreep7);			buttons.push(this.buycreep8);			buttons.push(this.buycreep9);			buttons.push(this.buycreep10);			for each (var button:MovieClip in buttons)			{				button.gotoAndStop(1);				button.buttonMode = true;				button.addEventListener(MouseEvent.ROLL_OVER, onRollOver);				button.addEventListener(MouseEvent.ROLL_OUT, onRollOut);				button.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDown);				button.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);			}			upgradeButton.gotoAndStop(1);			upgradeButton.buttonMode = true;			upgradeButton.addEventListener(MouseEvent.ROLL_OVER, onRollOver);			upgradeButton.addEventListener(MouseEvent.ROLL_OUT, onRollOut);			upgradeButton.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDownUpgrade);			upgradeButton.addEventListener(MouseEvent.MOUSE_UP, onMouseUp);			upgradeButton.contentclip.charge.text = "";			costFormat.size = 22;			costFormat.align = "right";			costFormat.bold = "true";			costFormat.font = "Dota Hypatia Regular";			costFormat.color = 0xFFFFFF;			chargeFormat.size = 22;			chargeFormat.align = "left";			chargeFormat.bold = "true";			chargeFormat.font = "Dota Hypatia Regular";			chargeFormat.color = 0xFFFFFF;		}		public function onLoaded():void		{			this.gameAPI.SubscribeToGameEvent("hlw_initialize_interface", this.onInitializeInterface);			this.gameAPI.SubscribeToGameEvent("hlw_enable_interface", this.onEnableInterface);			this.gameAPI.SubscribeToGameEvent("hlw_close_interface", this.onCloseInterface);			this.gameAPI.SubscribeToGameEvent("hlw_upgrade_controller", this.onUpgradeController);			this.gameAPI.SubscribeToGameEvent("hlw_update_creep_charges", this.onUpdateCharges);			this.gameAPI.SubscribeToGameEvent("hlw_update_single_creep_charge", this.onUpdateSingleCharge);			this.gameAPI.SubscribeToGameEvent("hlw_add_creep_charges", this.onAddCreepCharges);			this.gameAPI.SubscribeToGameEvent("hlw_too_many_creeps", this.onTooManyCreeps);			this.gameAPI.SubscribeToGameEvent("hlw_reduced_creeps", this.onReducedCreeps);			this.gameAPI.SubscribeToGameEvent("dota_money_changed", this.onMoneyChanged);			visible = false;						setTimeout(this.gameAPI.SendServerCommand, 1000, "hlw_reconnect");		}		public function onRollOver(e:MouseEvent)		{			var button:MovieClip = e.currentTarget as MovieClip;			if (! e.buttonDown)			{				button.gotoAndStop(2);			}		}		public function onRollOut(e:MouseEvent)		{			var button:MovieClip = e.currentTarget as MovieClip;			button.gotoAndStop(1);		}		public function onMouseDown(e:MouseEvent)		{			var button:MovieClip = e.currentTarget as MovieClip;			if (e is MouseEventEx)			{				var ee:MouseEventEx = e as MouseEventEx;				if (ee.buttonIdx == MouseEventEx.RIGHT_BUTTON)				{					buyAllCreeps(buttons.indexOf(button)+1);				}				else				{					buyCreep(buttons.indexOf(button)+1);				}			}			else			{				buyCreep(buttons.indexOf(button)+1);			}			button.gotoAndStop(3);			globals.GameInterface.PlaySound("General.ButtonClick");		}		public function onMouseDownUpgrade(e:MouseEvent)		{			var button:MovieClip = e.currentTarget as MovieClip;			upgradeController();			button.gotoAndStop(3);			globals.GameInterface.PlaySound("General.ButtonClick");		}		public function onMouseUp(e:MouseEvent)		{			var button:MovieClip = e.currentTarget as MovieClip;			button.gotoAndStop(2);			globals.GameInterface.PlaySound("General.ButtonClickRelease");		}		public function onScreenSizeChanged():void		{			var scale = this.globals.resizeManager.ScreenWidth / 1920 * 0.48;			scaleX = scale;			scaleY = scale;			x = (this.globals.resizeManager.ScreenWidth/2) - width/2.4;			y = (this.globals.resizeManager.ScreenHeight)/1080*800; //800 pixels on 1080p resolution		}		public function onInitializeInterface(arg1:Object)		{			if (arg1.nPlayerID == globals.Players.GetLocalPlayer())			{				controllerLevel = arg1.nControllerLevel;				tooManyCreeps = arg1.nTooManyCreeps;				maxCharges = arg1.nMaxCharges;				maxControllerLevel = arg1.nMaxControllerLevel;				creepsPerLevel = arg1.nCreepsPerLevel;				var upgradeCostsString:Array = new Array();				upgradeCostsString = arg1.nUpgradeCosts.split(",");				var creepCostsString:Array = new Array();				creepCostsString = arg1.nCreepCosts.split(",");				var i:int = 0;				for (i = 1; i <= upgradeCostsString.length; i++)				{					upgradeCost[i] = Number(upgradeCostsString[i]);				}				for (i=1; i<= creepCostsString.length; i++)				{					cost[i] = Number(creepCostsString[i]);				}				setIcons();				setCost();				checkBuyable();				if(controllerLevel == maxControllerLevel)				{					upgradeButton.visible = false;				}				visible = true;			}		}		public function onUpdateCharges(arg1:Object)		{			if (arg1.nPlayerID == globals.Players.GetLocalPlayer())			{				var creepChargesString:Array = new Array();				creepChargesString = arg1.nCreepCharges.split(",");				var i:int = 0;				for (i = 1; i<= creepChargesString.length; i++)				{					charges[i] = creepChargesString[i];				}				setCreepCharges();				checkBuyable();			}		}		public function onUpdateSingleCharge(arg1:Object)		{			if (arg1.nPlayerID == globals.Players.GetLocalPlayer())			{				charges[arg1.nCreepLevel] = arg1.nCreepCharge;				setSingleCreepCharge(arg1.nCreepLevel);				setCreepCharges();				checkBuyable();			}		}				public function onAddCreepCharges(arg1:Object)		{			var i:int = 0;			for(i = 1; i <= maxControllerLevel*creepsPerLevel; i++)			{				if(charges[i]<maxCharges)				{					charges[i] = charges[i]+1;				}			}			setCreepCharges();			checkBuyable();		}		public function onEnableInterface(arg1:Object)		{			if (this.gameStarted == false)			{				this.gameStarted = true;				checkBuyable();			}		}		public function onCloseInterface(arg1:Object)		{			visible = false;		}		public function onUpgradeController(arg1:Object)		{			if (arg1.nPlayerID == globals.Players.GetLocalPlayer())			{				this.controllerLevel = arg1.nControllerLevel;				if(controllerLevel == maxControllerLevel)				{					upgradeButton.visible = false;				}				setIcons();				setCost();				setCreepCharges();				checkBuyable();			}		}		public function onMoneyChanged(arg1:Object)		{			checkBuyable();		}		public function onTooManyCreeps(arg1:Object)		{			if(arg1.nPlayerID == globals.Players.GetLocalPlayer())			{				tooManyCreeps = true;				checkBuyable();			}		}		public function onReducedCreeps(arg1:Object)		{				if(arg1.nPlayerID == globals.Players.GetLocalPlayer())			{			tooManyCreeps = false;			checkBuyable();			}		}		public function checkBuyable()		{			var i:int = 0;			for each (var button:MovieClip in buttons)			{				i++;				if (canBuy(creepLevel(i)))				{					button.overlay.alpha = 0;				}				else				{					button.overlay.alpha = 0.7;				}			}			if (canUpgrade())			{				upgradeButton.overlay.alpha = 0;			}			else			{				upgradeButton.overlay.alpha = 0.7;			}		}		public function canBuy(level:int):Boolean		{			if (gameStarted && !tooManyCreeps && cost[level] <= globals.Players.GetGold(globals.Players.GetLocalPlayer()) && charges[level] > 0)			{				return true;			}			else			{				return false;			}		}				public function canUpgrade():Boolean		{			if (this.gameStarted && globals.Players.GetGold(globals.Players.GetLocalPlayer()) >= upgradeCost[controllerLevel])			{				return true;			}			else			{				return false;			}		}		public function setIcons()		{			var i:int = 0;			for each (var button:MovieClip in buttons)			{				i++;				Globals.instance.LoadImage("images/creep"+creepLevel(i).toString()+".png", button.contentclip.creepimage, false);			}			Globals.instance.LoadImage("images/upgrade"+controllerLevel+".png", upgradeButton.contentclip.creepimage, false);		}		public function setCost()		{			var i:int = 0;			for each (var button:MovieClip in buttons)			{				i++;				button.contentclip.creepcost.text = cost[creepLevel(i)];				button.contentclip.creepcost.setTextFormat(costFormat);			}			if (controllerLevel < maxControllerLevel)			{				upgradeButton.contentclip.creepcost.text = upgradeCost[controllerLevel];				upgradeButton.contentclip.creepcost.setTextFormat(costFormat);			}		}		public function creepLevel(button:int):int		{			return button+((this.controllerLevel-1)*creepsPerLevel);		}		public function setCreepCharges()		{			var i:int = 0;			for each (var button:MovieClip in buttons)			{				i++;				button.contentclip.charge.text = charges[creepLevel(i)].toString();				button.contentclip.charge.setTextFormat(chargeFormat);			}			checkBuyable();		}		public function setSingleCreepCharge(level:int)		{			var targetButton:int = level-((this.controllerLevel-1)*creepsPerLevel);			buttons[targetButton - 1].contentclip.charge.text = charges[level].toString();			buttons[targetButton - 1].contentclip.charge.setTextFormat(chargeFormat);		}		public function buyCreep(button:int):void		{			if (canBuy(creepLevel(button)))			{				globals.GameInterface.PlaySound("General.Buy");				this.gameAPI.SendServerCommand("hlw_buy_creep " + creepLevel(button).toString());				charges[creepLevel(button)] = charges[creepLevel(button)] - 1;				setCreepCharges();				checkBuyable();			}			else			{				globals.GameInterface.PlaySound("General.Cancel");			}		}		public function buyAllCreeps(button:int):void		{			if(canBuy(creepLevel(button)))			{				globals.GameInterface.PlaySound("General.Buy");				this.gameAPI.SendServerCommand("hlw_buy_all_creeps " + creepLevel(button).toString());			}			else			{				globals.GameInterface.PlaySound("General.Cancel");			}		}		public function upgradeController():void		{			if (canUpgrade())			{				globals.GameInterface.PlaySound("General.Buy");				globals.GameInterface.PlaySound("General.LevelUp");				this.gameAPI.SendServerCommand("hlw_upgrade");			}			else			{				globals.GameInterface.PlaySound("General.Cancel");			}		}	}}